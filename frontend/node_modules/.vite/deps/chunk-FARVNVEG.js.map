{
  "version": 3,
  "sources": ["../../vuetify/src/composables/resizeObserver.ts"],
  "sourcesContent": ["// Utilities\nimport { onBeforeUnmount, readonly, ref, watch } from 'vue'\nimport type { DeepReadonly, Ref } from 'vue'\n\n// Globals\nimport { IN_BROWSER } from '@/util/globals'\n\ninterface ResizeState {\n  resizeRef: Ref<Element | undefined>\n  contentRect: DeepReadonly<Ref<DOMRectReadOnly | undefined>>\n}\n\nexport function useResizeObserver (callback?: ResizeObserverCallback): ResizeState {\n  const resizeRef = ref<Element>()\n  const contentRect = ref<DOMRectReadOnly>()\n\n  if (IN_BROWSER) {\n    const observer = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n      callback?.(entries, observer)\n\n      if (!entries.length) return\n\n      contentRect.value = entries[0].contentRect\n    })\n\n    onBeforeUnmount(() => {\n      observer.disconnect()\n    })\n\n    watch(resizeRef, (newValue, oldValue) => {\n      if (oldValue) {\n        observer.unobserve(oldValue)\n        contentRect.value = undefined\n      }\n\n      if (newValue) observer.observe(newValue)\n    }, {\n      flush: 'post',\n    })\n  }\n\n  return {\n    resizeRef,\n    contentRect: readonly(contentRect),\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;AAYO,2BAA4B,UAAgD;AACjF,QAAM,YAAY,IAAG;AACrB,QAAM,cAAc,IAAG;AAEvB,MAAI,YAAY;AACd,UAAM,WAAW,IAAI,eAAgB,aAAmC;AACtE,kBAAQ,OAAR,SAAA,SAAW,SAAS,QAAZ;AAER,UAAI,CAAC,QAAQ;AAAQ;AAErB,kBAAY,QAAQ,QAAQ,GAAG;IAChC,CANgB;AAQjB,oBAAgB,MAAM;AACpB,eAAS,WAAT;IACD,CAFc;AAIf,UAAM,WAAW,CAAC,UAAU,aAAa;AACvC,UAAI,UAAU;AACZ,iBAAS,UAAU,QAAnB;AACA,oBAAY,QAAQ;MACrB;AAED,UAAI;AAAU,iBAAS,QAAQ,QAAjB;IACf,GAAE;MACD,OAAO;IADN,CAPE;EAUN;AAED,SAAO;IACL;IACA,aAAa,SAAS,WAAD;EAFhB;AAIR;",
  "names": []
}
